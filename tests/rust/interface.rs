// Autogenerated by FFIDJI

extern crate libc;
// To get strings, use CString. Example:
// let c_str: &CStr = unsafe { CStr::from_ptr(c_buf) };
use std::ffi::CStr; 

use std::alloc::GlobalAlloc;
use std::alloc::System;
use std::alloc::Layout;

use u16 as char16;
use i8 as int8;
use u8 as uint8;
use i16 as int16;
use u16 as uint16;
use i32 as int32;
use u32 as uint32;
use i64 as int64;
use u64 as uint64;
use f32 as float32;
use f64 as float64;

#[no_mangle]
pub extern "C" fn Alloc_FFI(length :int32) -> *mut libc::c_void
{ 
    unsafe
    { 
        return libc::malloc(length as usize);
    } 
} 

#[no_mangle]
pub extern "C" fn Free_FFI(ptr: *mut libc::c_void, length :int32)
{ 
    unsafe
    { 
        libc::free(ptr);
    } 
} 

pub struct StructA
{ 
    valueA: int8,
    valueB: int16,
    valueC: int32,
    valueD: int64,
    structB: StructB,
} 

pub struct StructB
{ 
    valueA: float16,
    valueB: float32,
    valueC: float64,
    structC: StructC,
} 

pub struct StructC
{ 
    valueA: uint8,
    valueB: uint16,
    valueC: uint32,
    valueD: uint64,
} 

pub struct string
{ 
    utf8bytes_ptr: *const uint8,
    utf8bytes_len: int32,
} 

#[no_mangle]
pub extern "C" fn Passthrough(structIn: StructA) -> StructA
{ 
} 
