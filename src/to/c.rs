use crate::interface::{Interface as Interface};
use crate::to::writer::ToWriter;

use std::fs::File;
use std::io::{BufWriter, Write};

pub struct CWriter;

impl ToWriter for CWriter {
    
    fn file_extension(&self) -> String { "h".to_string() }

    fn write(&mut self, writer: &mut BufWriter<File>, interface: &Interface) {

        let mut indentation = 0;

        macro_rules! write {
            () => {{
                writer.write("\n".as_bytes()).unwrap();
            }};
            ("{") => {{
                write!("{ ");
                indentation = indentation + 1;
            }};
            ("}") => {{
                indentation = indentation - 1;
                write!("} ");
            }};
            ($text:expr) => {{
                writer.write(" ".repeat(4 * indentation).as_bytes()).unwrap();
                writer.write($text.as_bytes()).unwrap();
                write!();
            }};
            ($text:expr, $($args:expr),*) => {{
                writer.write(" ".repeat(4 * indentation).as_bytes()).unwrap();
                writer.write(format!($text, $($args), *).as_bytes()).unwrap();
                write!();
            }}
        }

        write!("// Autogenerated by FFIDJI");
        write!();

        for method in &interface.methods {
            let parameters = &method.parameters;
            let parameters_str = parameters
                .into_iter()
                .map(|p| [p.r#type.clone(), p.name.clone()].join(" "))
                .collect::<Vec<String>>()
                .join(", ");

            write!("extern void {}({});", method.name, parameters_str);
        }
    }
}